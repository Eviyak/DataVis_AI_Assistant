import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import openai
import io
import json
import warnings

from plotly.subplots import make_subplots
from sklearn.ensemble import IsolationForest
from statsmodels.tsa.seasonal import seasonal_decompose
from pandas.api.types import is_datetime64_any_dtype

warnings.filterwarnings("ignore")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
st.set_page_config(page_title="AI Data Analyzer", layout="wide")
st.title("ü§ñ AI Data Analyzer Pro")

# OpenAI API Key
openai.api_key = st.secrets.get("OPENAI_API_KEY", "")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data(uploaded_file):
    file_bytes = uploaded_file.read()
    if uploaded_file.name.endswith(".csv"):
        return pd.read_csv(io.BytesIO(file_bytes), encoding_errors="ignore")
    elif uploaded_file.name.endswith((".xlsx", ".xls")):
        return pd.read_excel(io.BytesIO(file_bytes))
    elif uploaded_file.name.endswith(".json"):
        data = json.loads(file_bytes.decode("utf-8"))
        return pd.json_normalize(data)
    return None

# AI –∞–Ω–∞–ª–∏–∑ –∏–Ω—Å–∞–π—Ç–æ–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
@st.cache_data
def generate_insights_and_visuals(df):
    if not openai.api_key:
        return "‚ùå API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", [], []

    prompt = (
        f"–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö. –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ DataFrame:\n"
        f"–°—Ç—Ä–æ–∫: {df.shape[0]}\n"
        f"–ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}\n"
        f"–ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:\n{df.head(3).to_dict()}\n\n"
        f"1. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∏–Ω—Å–∞–π—Ç—ã (–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã).\n"
        f"2. –ü—Ä–µ–¥–ª–æ–∂–∏ —Å–ø–∏—Å–æ–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ –¥–∞–Ω–Ω—ã–µ: "
        f"[–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞, —Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞, —Ç–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞, 3D scatter, –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥, candlestick, –∞–Ω–æ–º–∞–ª–∏–∏, —è—â–∏–∫ —Å —É—Å–∞–º–∏, —Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞, –∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞, scatter —Å —Ç—Ä–µ–Ω–¥–æ–º, pairplot, density plot, violin plot, treemap, area chart, bubble chart, 2D histogram, boxen plot, –≤—Ä–µ–º–µ–Ω–Ω–æ–π heatmap]\n\n"
        f"–§–æ—Ä–º–∞—Ç JSON:\n"
        f'{{"insights": "...", "visualizations": [{{"viz_type": "...", "x_axis": "...", "y_axis": "...", "z_axis": "...", "color": "...", "size": "..."}}]}}'
    )

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=1000
        )
        content = response.choices[0].message.content.strip()

        if not content:
            return "‚ö†Ô∏è GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç", [], None

        try:
            result = json.loads(content)
            return result.get("insights", ""), result.get("visualizations", []), None
        except json.JSONDecodeError as e:
            return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON:\n```json\n{content}\n```\n\n–û—à–∏–±–∫–∞: {e}", [], None

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}", [], None


# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
def create_visualization(df, viz):
    try:
        viz_type = viz.get("viz_type", "").lower()
        x = viz.get("x_axis")
        y = viz.get("y_axis")
        z = viz.get("z_axis")
        color = viz.get("color")
        size = viz.get("size")

        if viz_type == "–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
            return px.histogram(df, x=x, color=color)
        elif viz_type == "—Ç–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
            return px.scatter(df, x=x, y=y, color=color, size=size)
        elif viz_type == "3d scatter":
            return px.scatter_3d(df, x=x, y=y, z=z, color=color, size=size)
        elif viz_type == "–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥":
            if is_datetime64_any_dtype(df[x]):
                return px.line(df.sort_values(x), x=x, y=y, color=color)
        elif viz_type == "—Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞":
            corr = df.select_dtypes(include=np.number).corr()
            return px.imshow(corr, text_auto=True)
        elif viz_type == "—è—â–∏–∫ —Å —É—Å–∞–º–∏":
            return px.box(df, x=x, y=y, color=color)
        elif viz_type == "bubble chart":
            return px.scatter(df, x=x, y=y, size=size, color=color)
        elif viz_type == "violin plot":
            return px.violin(df, x=x, y=y, color=color)
        elif viz_type == "boxen plot":
            return px.box(df, x=x, y=y, color=color, points="all", notched=True)
        elif viz_type == "—Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
            return px.bar(df, x=x, y=y, color=color)
        elif viz_type == "–∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
            return px.pie(df, names=x, values=y)
        elif viz_type == "density plot":
            return px.density_contour(df, x=x, y=y)
        elif viz_type == "area chart":
            return px.area(df, x=x, y=y, color=color)
        else:
            return None
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return None

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
uploaded_file = st.file_uploader("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV, Excel –∏–ª–∏ JSON —Ñ–∞–π–ª", type=["csv", "xlsx", "xls", "json"])
if uploaded_file:
    df = load_data(uploaded_file)
    if df is not None:
        st.subheader("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(df.head(100), use_container_width=True)

        st.divider()

        # AI-–∏–Ω—Å–∞–π—Ç—ã –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        with st.spinner("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π..."):
            insights, visualizations, _ = generate_insights_and_visuals(df)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–æ–≤
        st.subheader("üß† –ò–Ω—Å–∞–π—Ç—ã")
        st.markdown(insights)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
        if visualizations:
            st.subheader("üìà –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            for i, viz in enumerate(visualizations):
                fig = create_visualization(df, viz)
                if fig:
                    st.markdown(f"**{i+1}. {viz['viz_type'].capitalize()}**")
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.info(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é: {viz}")
        else:
            st.info("AI –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.")
