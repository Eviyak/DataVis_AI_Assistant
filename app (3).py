import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.ensemble import IsolationForest
from sklearn.linear_model import LinearRegression
from statsmodels.tsa.seasonal import seasonal_decompose
import openai
import json
import datetime
from pandas.api.types import is_numeric_dtype, is_datetime64_any_dtype
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="ü§ñ AI Data Analyzer Pro",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –¢–µ–º–Ω–∞—è/—Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
theme = st.sidebar.radio("üé® –¢–µ–º–∞", ["–°–≤–µ—Ç–ª–∞—è", "–¢–µ–º–Ω–∞—è"])
if theme == "–¢–µ–º–Ω–∞—è":
    plt.style.use('dark_background')
    st.markdown("""
        <style>
            .stApp { background-color: #1E1E1E; }
            .css-1d391kg { color: white; }
        </style>
    """, unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("ü§ñ AI Data Analyzer Pro")
st.markdown("""
    *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å AI-powered –∏–Ω—Å–∞–π—Ç–∞–º–∏*  
    **–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV, Excel –∏–ª–∏ JSON** ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
""")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data(uploaded_file):
    try:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith(('.xlsx', '.xls')):
            df = pd.read_excel(uploaded_file)
        elif uploaded_file.name.endswith('.json'):
            data = json.load(uploaded_file)
            df = pd.DataFrame(data) if isinstance(data, list) else pd.json_normalize(data)
        
        # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç
        for col in df.columns:
            if df[col].dtype == 'object':
                try:
                    df[col] = pd.to_datetime(df[col])
                except:
                    pass
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        return None

# AI –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
def analyze_with_ai(df):
    try:
        analysis = f"–î–∞—Ç–∞—Å–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {df.shape[0]} —Å—Ç—Ä–æ–∫ –∏ {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫.\n"
        
        # –ß–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        num_cols = df.select_dtypes(include=np.number).columns
        if len(num_cols) > 0:
            analysis += "\n**–ß–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n"
            for col in num_cols:
                analysis += f"- {col}: —Å—Ä–µ–¥–Ω–µ–µ = {df[col].mean():.2f}, –º–∏–Ω = {df[col].min():.2f}, –º–∞–∫—Å = {df[col].max():.2f}\n"
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        cat_cols = df.select_dtypes(exclude=np.number).columns
        if len(cat_cols) > 0:
            analysis += "\n**–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n"
            for col in cat_cols:
                analysis += f"- {col}: {df[col].nunique()} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π\n"
        
        # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        missing = df.isnull().sum()
        if missing.sum() > 0:
            analysis += "\n‚ö†Ô∏è **–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**\n"
            for col, count in missing.items():
                if count > 0:
                    analysis += f"- {col}: {count} –ø—Ä–æ–ø—É—Å–∫–æ–≤ ({count/len(df):.1%})\n"
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        if len(num_cols) > 1:
            corr = df[num_cols].corr().abs().unstack().sort_values(ascending=False)
            strong_corr = corr[(corr > 0.7) & (corr < 1)]
            if len(strong_corr) > 0:
                analysis += "\nüîó **–°–∏–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:**\n"
                for pair, value in strong_corr.items():
                    analysis += f"- {pair[0]} –∏ {pair[1]}: {value:.2f}\n"
        
        return analysis
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

# –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
def detect_anomalies(df, column):
    try:
        model = IsolationForest(contamination=0.05, random_state=42)
        df['anomaly'] = model.fit_predict(df[[column]])
        anomalies = df[df['anomaly'] == -1]
        return anomalies
    except:
        return None

# –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑
def time_series_analysis(df, date_col, value_col):
    try:
        df = df.set_index(date_col).sort_index()
        decomposition = seasonal_decompose(df[value_col], period=12)
        
        fig = make_subplots(rows=4, cols=1, shared_xaxes=True)
        
        fig.add_trace(go.Scatter(x=df.index, y=df[value_col], name='–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'), row=1, col=1)
        fig.add_trace(go.Scatter(x=decomposition.trend.index, y=decomposition.trend, name='–¢—Ä–µ–Ω–¥'), row=2, col=1)
        fig.add_trace(go.Scatter(x=decomposition.seasonal.index, y=decomposition.seasonal, name='–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å'), row=3, col=1)
        fig.add_trace(go.Scatter(x=decomposition.resid.index, y=decomposition.resid, name='–û—Å—Ç–∞—Ç–∫–∏'), row=4, col=1)
        
        fig.update_layout(height=800, title_text="–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")
        return fig
    except:
        return None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ —Å GPT
def generate_ai_insights(df):
    try:
        # –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –≤—ã–∑–æ–≤–∞
        insights = ["AI –∞–Ω–∞–ª–∏–∑ –≤—ã—è–≤–∏–ª —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:"]
        
        num_cols = df.select_dtypes(include=np.number).columns
        if len(num_cols) > 1:
            corr = df[num_cols].corr().abs().unstack().sort_values(ascending=False)
            top_corr = corr[(corr > 0.5) & (corr < 1)].head(1)
            if len(top_corr) > 0:
                pair, value = top_corr.index[0], top_corr.values[0]
                insights.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–∏–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è ({value:.2f}) –º–µ–∂–¥—É '{pair[0]}' –∏ '{pair[1]}'")
        
        date_cols = [col for col in df.columns if is_datetime64_any_dtype(df[col])]
        if date_cols and len(num_cols) > 0:
            insights.append(f"–î–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ '{date_cols[0]}' - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")
        
        missing = df.isnull().sum()
        if missing.sum() > 0:
            worst_col = missing.idxmax()
            insights.append(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '{worst_col}' —Å–æ–¥–µ—Ä–∂–∏—Ç {missing.max()} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ({missing.max()/len(df):.1%} –¥–∞–Ω–Ω—ã—Ö)")
        
        return "\n\n".join(insights)
    except:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI –∏–Ω—Å–∞–π—Ç—ã"

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
def create_visualization(df, viz_type, x=None, y=None, z=None, color=None, size=None, animation=None):
    try:
        if viz_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
            fig = px.histogram(df, x=x, color=color, marginal="box", nbins=50)
        
        elif viz_type == "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞":
            corr = df.select_dtypes(include=np.number).corr()
            fig = px.imshow(corr, text_auto=True, color_continuous_scale='RdBu')
        
        elif viz_type == "3D Scatter":
            fig = px.scatter_3d(df, x=x, y=y, z=z, color=color, size=size)
        
        elif viz_type == "–ê–Ω–æ–º–∞–ª–∏–∏":
            anomalies = detect_anomalies(df, x)
            fig = px.scatter(df, x=x, y=y, color=df.index.isin(anomalies.index))
        
        elif viz_type == "–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥":
            df = df.set_index(x).sort_index()
            fig = px.line(df, y=y, color=color)
            if len(df) > 30:
                df['rolling'] = df[y].rolling(7).mean()
                fig.add_scatter(x=df.index, y=df['rolling'], name='–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ (7)')
        
        elif viz_type == "Candlestick":
            fig = go.Figure(data=[go.Candlestick(
                x=df[x],
                open=df[y],
                high=df[y]+df[y].std(),
                low=df[y]-df[y].std(),
                close=df[y])])
        
        else:
            fig = px.scatter(df, x=x, y=y, color=color, size=size, animation_frame=animation)
        
        fig.update_layout(
            template="plotly_dark" if theme == "–¢–µ–º–Ω–∞—è" else "plotly_white",
            hovermode="x unified"
        )
        return fig
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return None

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
uploaded_file = st.sidebar.file_uploader("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª", type=["csv", "xlsx", "json"])

if uploaded_file:
    df = load_data(uploaded_file)
    if df is not None:
        st.sidebar.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
        tab1, tab2, tab3 = st.tabs(["üîç –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö", "üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "ü§ñ AI –ê–Ω–∞–ª–∏–∑"])
        
        with tab1:
            st.subheader("–ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö")
            st.dataframe(df.head(), use_container_width=True)
            
            st.subheader("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            st.write(f"**–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:**\n{df.dtypes.to_frame().T}")
            
            missing = df.isnull().sum()
            if missing.sum() > 0:
                st.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n{missing[missing > 0]}")
            else:
                st.success("‚úÖ –ù–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
        
        with tab2:
            viz_type = st.selectbox("–¢–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", [
                "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞", "3D Scatter", 
                "–ê–Ω–æ–º–∞–ª–∏–∏", "–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥", "Candlestick"
            ])
            
            cols = st.columns(2)
            with cols[0]:
                x_axis = st.selectbox("–û—Å—å X", df.columns, index=0)
            with cols[1]:
                y_axis = st.selectbox("–û—Å—å Y", df.columns, index=min(1, len(df.columns)-1))
            
            extra_cols = st.columns(3)
            with extra_cols[0]:
                z_axis = st.selectbox("–û—Å—å Z (3D)", [None] + df.select_dtypes(include=np.number).columns.tolist())
            with extra_cols[1]:
                color = st.selectbox("–¶–≤–µ—Ç", [None] + df.columns.tolist())
            with extra_cols[2]:
                size = st.selectbox("–†–∞–∑–º–µ—Ä", [None] + df.select_dtypes(include=np.number).columns.tolist())
            
            if st.button("–°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"):
                fig = create_visualization(
                    df, viz_type, 
                    x=x_axis, y=y_axis, z=z_axis,
                    color=color, size=size
                )
                if fig:
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                    if viz_type == "–ê–Ω–æ–º–∞–ª–∏–∏":
                        anomalies = detect_anomalies(df, x_axis)
                        if len(anomalies) > 0:
                            st.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(anomalies)} –∞–Ω–æ–º–∞–ª–∏–π")
                            st.dataframe(anomalies)
        
        with tab3:
            st.subheader("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
            st.write(analyze_with_ai(df))
            
            st.subheader("AI –ò–Ω—Å–∞–π—Ç—ã")
            st.write(generate_ai_insights(df))
            
            # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
            date_cols = [col for col in df.columns if is_datetime64_any_dtype(df[col])]
            if date_cols and len(df.select_dtypes(include=np.number).columns) > 0:
                st.subheader("–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")
                selected_date = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É", date_cols)
                selected_value = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ", df.select_dtypes(include=np.number).columns)
                
                if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥"):
                    ts_fig = time_series_analysis(df, selected_date, selected_value)
                    if ts_fig:
                        st.plotly_chart(ts_fig, use_container_width=True)
            
            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
            if len(date_cols) > 0 and len(df.select_dtypes(include=np.number).columns) > 0:
                st.subheader("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
                if st.button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ (–ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è)"):
                    try:
                        model = LinearRegression()
                        X = pd.to_numeric(df[date_cols[0]]).values.reshape(-1, 1)
                        y = df[selected_value]
                        model.fit(X, y)
                        
                        future_dates = pd.date_range(
                            start=df[date_cols[0]].max(),
                            periods=10,
                            freq=pd.infer_freq(df[date_cols[0]])
                        
                        future_X = pd.to_numeric(future_dates).values.reshape(-1, 1)
                        future_y = model.predict(future_X)
                        
                        fig = go.Figure()
                        fig.add_scatter(x=df[date_cols[0]], y=y, name="–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
                        fig.add_scatter(x=future_dates, y=future_y, name="–ü—Ä–æ–≥–Ω–æ–∑", line=dict(dash='dot'))
                        st.plotly_chart(fig, use_container_width=True)
                    except:
                        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏")

else:
    st.info("üëà –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
    
st.markdown("---")
st.markdown("""
    ### *–Ø–∫–æ–≤–ª–µ–≤–∞ –≠–≤–µ–ª–∏–Ω–∞ –í—è—á–µ—Å–ª–∞–æ–≤–Ω–∞*
""")
