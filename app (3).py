import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from fpdf import FPDF
import io

st.set_page_config(page_title="üìä AI –í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –î–∞–Ω–Ω—ã—Ö", layout="wide")
st.title("ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV/Excel —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é, –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –∏ PDF-–æ—Ç—á—ë—Ç")

# üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
def generate_pdf_report(df, summary_text):
    pdf = FPDF()
    pdf.add_page()

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç Unicode
    pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
    pdf.set_font("DejaVu", size=12)

    pdf.cell(200, 10, txt="üìÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç", ln=True, align="C")
    pdf.ln(10)

    for line in summary_text.split("\n"):
        pdf.multi_cell(0, 10, txt=line)

    buffer = io.BytesIO()
    pdf.output(buffer)
    buffer.seek(0)
    return buffer

# üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ Excel —Ñ–∞–π–ª", type=["csv", "xlsx"])

if uploaded_file:
    try:
        df = pd.read_csv(uploaded_file) if uploaded_file.name.endswith('.csv') else pd.read_excel(uploaded_file)
        st.success(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {df.shape[0]} —Å—Ç—Ä–æ–∫ –∏ {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")

        st.subheader("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(df.head())

        st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        num_cols = df.select_dtypes(include='number').columns
        if len(num_cols):
            col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü", num_cols)
            fig, ax = plt.subplots(1, 2, figsize=(12, 4))
            sns.histplot(df[col], ax=ax[0], kde=True)
            sns.boxplot(x=df[col], ax=ax[1])
            st.pyplot(fig)

        st.subheader("ü§ñ ML-–∞–Ω–∞–ª–∏–∑ (RandomForest)")
        target = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É (—Ç–∞—Ä–≥–µ—Ç)", df.columns)
        X = df.drop(columns=[target])
        y = df[target]
        X = pd.get_dummies(X)  # –∞–≤—Ç–æ-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
        model = RandomForestClassifier()
        model.fit(X_train, y_train)
        preds = model.predict(X_test)
        report = classification_report(y_test, preds)

        st.code(report, language='text')

        st.subheader("üìÑ –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç –≤ PDF")
        summary = f"""–û—Ç—á—ë—Ç –ø–æ –¥–∞—Ç–∞—Å–µ—Ç—É:
- –°—Ç—Ä–æ–∫: {df.shape[0]}
- –ö–æ–ª–æ–Ω–æ–∫: {df.shape[1]}
- –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {target}

–ú–µ—Ç—Ä–∏–∫–∞ –º–æ–¥–µ–ª–∏:
{report}
        """
        pdf_file = generate_pdf_report(df, summary)
        st.download_button("üì• –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á—ë—Ç", pdf_file, file_name="report.pdf")

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {e}")

else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª")
