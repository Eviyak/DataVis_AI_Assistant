# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EJssdbxYBluvPtxioJpupUZH3Q805Jzv
"""

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import json
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from fpdf import FPDF
import io

st.set_page_config(page_title="üìä AI –í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –î–∞–Ω–Ω—ã—Ö", layout="wide")
st.title("üìä AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö")

st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV, Excel –∏–ª–∏ JSON —Ñ–∞–π–ª, –ø–æ–ª—É—á–∏—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏ ML-–∞–Ω–∞–ª–∏–∑ üìà")


def load_data(uploaded_file):
    try:
        if uploaded_file.name.endswith('.csv'):
            return pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith(('.xlsx', '.xls')):
            return pd.read_excel(uploaded_file)
        elif uploaded_file.name.endswith('.json'):
            data = json.load(uploaded_file)
            if isinstance(data, list):
                return pd.DataFrame(data)
            else:
                st.error("JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤.")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
    return None

def generate_pdf_report(df, report_text):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.multi_cell(0, 10, "AI –û—Ç—á–µ—Ç –æ –¥–∞–Ω–Ω—ã—Ö:\n")
    pdf.multi_cell(0, 10, report_text)
    buffer = io.BytesIO()
    pdf.output(buffer)
    buffer.seek(0)
    return buffer

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª", type=["csv", "xlsx", "xls", "json"])

if uploaded_file:
    df = load_data(uploaded_file)
    if df is not None:
        st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")

        tab1, tab2, tab3, tab4 = st.tabs(["üßæ –î–∞–Ω–Ω—ã–µ", "üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "üß† AI-–ê–Ω–∞–ª–∏–∑", "üìÑ PDF –û—Ç—á–µ—Ç"])

        with tab1:
            st.dataframe(df.head())

        with tab2:
            num_cols = df.select_dtypes(include='number').columns
            cat_cols = df.select_dtypes(include='object').columns

            if num_cols.any():
                col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É", num_cols)
                fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))
                sns.histplot(df[col], kde=True, ax=ax1)
                sns.boxplot(x=df[col], ax=ax2)
                ax1.set_title("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞")
                ax2.set_title("Boxplot")
                st.pyplot(fig)

            if cat_cols.any():
                col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É", cat_cols)
                fig, ax = plt.subplots()
                df[col].value_counts().plot(kind='bar', ax=ax)
                ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                st.pyplot(fig)

        with tab3:
            st.write("üî¨ –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏...")

            target = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)", df.columns)
            features = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏", df.select_dtypes('number').drop(columns=[target], errors='ignore').columns)

            if features and target:
                try:
                    X = df[features]
                    y = df[target]
                    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
                    model = RandomForestClassifier()
                    model.fit(X_train, y_train)
                    y_pred = model.predict(X_test)
                    report = classification_report(y_test, y_pred)
                    st.code(report)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞: {e}")
            else:
                st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –ø—Ä–∏–∑–Ω–∞–∫–∏.")

        with tab4:
            st.write("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF –æ—Ç—á–µ—Ç")
            report_summary = f"–§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö: {df.shape}\n–ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}\n\n"
            if 'report' in locals():
                report_summary += "\n–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç:\n" + report
            pdf = generate_pdf_report(df, report_summary)
            st.download_button("üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç PDF", pdf, file_name="data_report.pdf")

else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")