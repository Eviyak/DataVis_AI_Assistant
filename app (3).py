import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import json
import io

st.set_page_config(page_title="üìä DataVis AI", layout="wide")
st.title("üìä AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV, Excel –∏–ª–∏ JSON —Ñ–∞–π–ª –∏ –∏—Å—Å–ª–µ–¥—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —É–º–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data(uploaded_file):
    try:
        if uploaded_file.name.endswith('.csv'):
            return pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith(('.xlsx', '.xls')):
            return pd.read_excel(uploaded_file)
        elif uploaded_file.name.endswith('.json'):
            data = json.load(uploaded_file)
            return pd.DataFrame(data) if isinstance(data, list) else None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª", type=["csv", "xlsx", "xls", "json"])

if uploaded_file:
    df = load_data(uploaded_file)
    if df is not None:
        st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {df.shape[0]} —Å—Ç—Ä–æ–∫ –∏ {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
        st.dataframe(df.head())

        st.subheader("üìà –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤")
        col1, col2 = st.columns(2)

        with col1:
            selected_col1 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É", df.columns)
        with col2:
            selected_col2 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –∫–æ–ª–æ–Ω–∫—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", [None] + list(df.columns))

        # –û–ø—Ä–µ–¥–µ–ª–∏–º —Ç–∏–ø—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –¥–∞–Ω–Ω—ã–º
        numeric_cols = df.select_dtypes(include='number').columns
        categorical_cols = df.select_dtypes(exclude='number').columns

        available_plots = []

        if selected_col1 and not selected_col2:
            if selected_col1 in numeric_cols:
                available_plots = ['–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞', 'Boxplot', '–ö–∞—Ä—Ç–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (KDE)']
            elif selected_col1 in categorical_cols:
                available_plots = ['Barplot']

        if selected_col1 and selected_col2:
            if selected_col1 in numeric_cols and selected_col2 in numeric_cols:
                available_plots = ['Scatterplot', '–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫']
            elif (selected_col1 in categorical_cols and selected_col2 in numeric_cols) or \
                 (selected_col2 in categorical_cols and selected_col1 in numeric_cols):
                available_plots = ['Boxplot', 'Barplot']

        plot_type = st.selectbox("–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", available_plots if available_plots else ["–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"])

        if st.button("üìä –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫") and plot_type != "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ":
            fig, ax = plt.subplots(figsize=(8, 5))

            try:
                if plot_type == '–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞':
                    sns.histplot(df[selected_col1], kde=True, ax=ax)
                elif plot_type == 'Boxplot':
                    if selected_col2:
                        sns.boxplot(x=df[selected_col2], y=df[selected_col1], ax=ax)
                    else:
                        sns.boxplot(y=df[selected_col1], ax=ax)
                elif plot_type == 'Barplot':
                    if selected_col2:
                        sns.barplot(x=df[selected_col1], y=df[selected_col2], ax=ax)
                    else:
                        sns.countplot(x=df[selected_col1], ax=ax)
                elif plot_type == '–ö–∞—Ä—Ç–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (KDE)':
                    sns.kdeplot(df[selected_col1], fill=True, ax=ax)
                elif plot_type == 'Scatterplot':
                    sns.scatterplot(x=df[selected_col1], y=df[selected_col2], ax=ax)
                elif plot_type == '–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫':
                    sns.lineplot(x=df[selected_col1], y=df[selected_col2], ax=ax)
                st.pyplot(fig)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")
