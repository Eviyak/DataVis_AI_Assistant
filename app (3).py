import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import json
import io
from io import BytesIO
import tempfile
from fpdf import FPDF

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

st.set_page_config(page_title="üìä AI –í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –î–∞–Ω–Ω—ã—Ö", layout="wide")
st.title("üìä AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (CSV, Excel –∏–ª–∏ JSON) ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ + –≥—Ä–∞—Ñ–∏–∫–∏ + AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é + PDF –æ—Ç—á—ë—Ç.")

def load_data(uploaded_file):
    try:
        if uploaded_file.name.endswith('.csv'):
            return pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith(('.xlsx', '.xls')):
            return pd.read_excel(uploaded_file)
        elif uploaded_file.name.endswith('.json'):
            data = json.load(uploaded_file)
            return pd.DataFrame(data) if isinstance(data, list) else None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return None

def fig_to_bytes(fig):
    buf = io.BytesIO()
    fig.savefig(buf, format='PNG')
    plt.close(fig)
    buf.seek(0)
    return buf

def generate_pdf_report(data_info, stats_info, ai_info, hist_img_buf=None, boxplot_img_buf=None):
    pdf = FPDF()
    pdf.add_font('DejaVu', '', 'DejaVuSans.ttf', uni=True)
    pdf.add_font('DejaVu', 'B', 'DejaVuSans-Bold.ttf', uni=True)
    pdf.add_page()

    pdf.set_font('DejaVu', 'B', 20)
    pdf.cell(0, 15, '–û—Ç—á—ë—Ç', align='C', ln=True)
    pdf.ln(10)

    pdf.set_font('DejaVu', 'B', 16)
    pdf.cell(0, 10, '–î–∞–Ω–Ω—ã–µ', ln=True)
    pdf.set_font('DejaVu', '', 12)
    pdf.multi_cell(0, 8, data_info)
    pdf.ln(5)

    pdf.set_font('DejaVu', 'B', 16)
    pdf.cell(0, 10, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', ln=True)
    pdf.set_font('DejaVu', '', 12)
    pdf.multi_cell(0, 8, stats_info)
    pdf.ln(5)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    if hist_img_buf:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp_hist:
            tmp_hist.write(hist_img_buf.getbuffer())
            tmp_hist.flush()
            pdf.image(tmp_hist.name, x=10, w=90)

    if boxplot_img_buf:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp_box:
            tmp_box.write(boxplot_img_buf.getbuffer())
            tmp_box.flush()
            pdf.image(tmp_box.name, x=110, w=90)

    pdf.ln(5)

    pdf.set_font('DejaVu', 'B', 16)
    pdf.cell(0, 10, 'AI-–º–æ–¥–µ–ª—å', ln=True)
    pdf.set_font('DejaVu', '', 12)
    pdf.multi_cell(0, 8, ai_info if ai_info else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    pdf_bytes = pdf.output(dest='S').encode('latin1')
    return io.BytesIO(pdf_bytes)

# ==== –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ====

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª", type=["csv", "xlsx", "xls", "json"])

ai_report_text = None
hist_buf = None
boxplot_buf = None
selected = None

if uploaded_file:
    df = load_data(uploaded_file)
    if df is not None:
        st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {df.shape[0]} —Å—Ç—Ä–æ–∫ –∏ {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")

        tab1, tab2, tab3, tab4 = st.tabs(["üìã –î–∞–Ω–Ω—ã–µ", "üìà –ê–Ω–∞–ª–∏–∑", "üß† AI-–º–æ–¥–µ–ª—å", "üìÑ –û—Ç—á—ë—Ç"])

        with tab1:
            st.dataframe(df.head(100))

        with tab2:
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            st.write("–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:")
            st.write(df.dtypes)
            st.write("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
            st.write(df.isnull().sum())

            num_cols = df.select_dtypes(include='number').columns
            if len(num_cols) > 0:
                selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã", num_cols)
                fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))
                sns.histplot(df[selected], ax=ax1, kde=True)
                ax1.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
                sns.boxplot(x=df[selected], ax=ax2)
                ax2.set_title("Boxplot")
                st.pyplot(fig)

                fig_hist, ax_hist = plt.subplots(figsize=(6, 4))
                sns.histplot(df[selected], ax=ax_hist, kde=True)
                ax_hist.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
                hist_buf = fig_to_bytes(fig_hist)

                fig_box, ax_box = plt.subplots(figsize=(6, 4))
                sns.boxplot(x=df[selected], ax=ax_box)
                ax_box.set_title("Boxplot")
                boxplot_buf = fig_to_bytes(fig_box)
            else:
                st.warning("–ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.")

        with tab3:
            st.subheader("üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (RandomForestClassifier)")
            target_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)", df.columns)
            features = [col for col in df.select_dtypes(include='number').columns if col != target_column]

            if len(features) > 0:
                X = df[features]
                y = df[target_column]

                try:
                    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
                    model = RandomForestClassifier()
                    model.fit(X_train, y_train)
                    y_pred = model.predict(X_test)
                    ai_report_text = classification_report(y_test, y_pred, zero_division=0)
                    st.code(ai_report_text, language='text')
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
            else:
                st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.")

        with tab4:
            st.subheader("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á—ë—Ç–∞")
            data_info = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {df.shape[0]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫: {df.shape[1]}"
            stats_summary = f"""
–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {selected if selected else '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}

–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —á–∏—Å–ª–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º:
{df.describe().to_string()}
"""

            if st.button("üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç –≤ PDF"):
                pdf_buffer = generate_pdf_report(data_info, stats_summary, ai_report_text, hist_buf, boxplot_buf)
                st.download_button("üìÑ –°–∫–∞—á–∞—Ç—å PDF", data=pdf_buffer, file_name="ai_data_report.pdf", mime="application/pdf")
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV, Excel –∏–ª–∏ JSON —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
