import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.ensemble import IsolationForest
from sklearn.linear_model import LinearRegression
from statsmodels.tsa.seasonal import seasonal_decompose
import openai
import json
import datetime
from pandas.api.types import is_numeric_dtype, is_datetime64_any_dtype
import warnings
import io
import time
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è Streamlit Cloud
st.set_page_config(
    page_title="ü§ñ AI Data Analyzer Pro",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ Streamlit Secrets
if 'OPENAI_API_KEY' in st.secrets:
    openai.api_key = st.secrets['OPENAI_API_KEY']
else:
    openai.api_key = ""

# –¢–µ–º–Ω–∞—è/—Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
theme = st.sidebar.radio("üé® –¢–µ–º–∞", ["–°–≤–µ—Ç–ª–∞—è", "–¢–µ–º–Ω–∞—è"])
if theme == "–¢–µ–º–Ω–∞—è":
    plt.style.use('dark_background')
    st.markdown("""
        <style>
            .stApp { background-color: #1E1E1E; }
            .st-bb { background-color: transparent; }
            .st-at { background-color: #2E2E2E; }
            .css-1d391kg { color: white; }
            footer { visibility: hidden; }
        </style>
    """, unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("ü§ñ AI Data Analyzer Pro")
st.markdown("""
    <div style="background-color:#f0f2f6;padding:10px;border-radius:10px;margin-bottom:20px;">
    <p style="color:#333;font-size:18px;">üöÄ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å AI-powered –∏–Ω—Å–∞–π—Ç–∞–º–∏</b></p>
    <p style="color:#666;">–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV, Excel –∏–ª–∏ JSON ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é</p>
    </div>
""", unsafe_allow_html=True)

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(show_spinner="–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ... ‚è≥", ttl=3600, max_entries=3)
def load_data(uploaded_file):
    try:
        file_bytes = uploaded_file.read()
        
        if uploaded_file.name.endswith('.csv'):
            return pd.read_csv(io.BytesIO(file_bytes), encoding_errors='ignore')
        
        elif uploaded_file.name.endswith(('.xlsx', '.xls')):
            return pd.read_excel(io.BytesIO(file_bytes))
        
        elif uploaded_file.name.endswith('.json'):
            data = json.loads(file_bytes.decode('utf-8'))
            return pd.json_normalize(data)
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
def reduce_mem_usage(df):
    start_mem = df.memory_usage().sum() / 1024**2
    for col in df.columns:
        col_type = df[col].dtype
        
        if col_type != object:
            c_min = df[col].min()
            c_max = df[col].max()
            if str(col_type)[:3] == 'int':
                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:
                    df[col] = df[col].astype(np.int8)
                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:
                    df[col] = df[col].astype(np.int16)
                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:
                    df[col] = df[col].astype(np.int32)
                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:
                    df[col] = df[col].astype(np.int64)
            else:
                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:
                    df[col] = df[col].astype(np.float16)
                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:
                    df[col] = df[col].astype(np.float32)
                else:
                    df[col] = df[col].astype(np.float64)
    end_mem = df.memory_usage().sum() / 1024**2
    st.sidebar.info(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏: {start_mem:.2f} MB ‚Üí {end_mem:.2f} MB (—Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ {100*(start_mem-end_mem)/start_mem:.1f}%)")
    return df

# AI –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(show_spinner="–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ... üîç", ttl=600)
def analyze_with_ai(df):
    try:
        analysis = f"### üìä –û–±—â–∏–π –æ–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö\n"
        analysis += f"- **–°—Ç—Ä–æ–∫–∏:** {df.shape[0]}\n"
        analysis += f"- **–ö–æ–ª–æ–Ω–∫–∏:** {df.shape[1]}\n"
        analysis += f"- **–û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö:** {df.memory_usage().sum() / 1024**2:.2f} MB\n\n"
        
        # –ß–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        num_cols = df.select_dtypes(include=np.number).columns
        if len(num_cols) > 0:
            analysis += "### üî¢ –ß–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
            stats = df[num_cols].describe().transpose()
            stats['skew'] = df[num_cols].skew()
            analysis += stats[['mean', 'std', 'min', '50%', 'max', 'skew']].to_markdown()
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        cat_cols = df.select_dtypes(exclude=np.number).columns
        if len(cat_cols) > 0:
            analysis += "\n\n### üî§ –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
            for col in cat_cols:
                analysis += f"- **{col}**: {df[col].nunique()} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π\n"
        
        # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        missing = df.isnull().sum()
        if missing.sum() > 0:
            analysis += "\n\n### ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\n"
            missing_percent = missing[missing > 0] / len(df) * 100
            missing_df = pd.DataFrame({'–ö–æ–ª–æ–Ω–∫–∞': missing_percent.index, 
                                      '–ü—Ä–æ–ø—É—Å–∫–∏': missing[missing > 0], 
                                      '%': missing_percent.values.round(1)})
            analysis += missing_df.to_markdown(index=False)
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        if len(num_cols) > 1:
            corr = df[num_cols].corr().abs().unstack().sort_values(ascending=False)
            strong_corr = corr[(corr > 0.7) & (corr < 1)].drop_duplicates()
            if len(strong_corr) > 0:
                analysis += "\n\n### üîó –°–∏–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏\n"
                for pair, value in strong_corr.items():
                    analysis += f"- {pair[0]} –∏ {pair[1]}: {value:.2f}\n"
        
        return analysis
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

# –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
@st.cache_data(show_spinner="–ò—â—É –∞–Ω–æ–º–∞–ª–∏–∏... üïµÔ∏è", ttl=300)
def detect_anomalies(df, column):
    try:
        if len(df) > 10000:  # –î–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±–æ—Ä–∫—É
            sample = df.sample(min(5000, len(df)))
        else:
            sample = df
            
        model = IsolationForest(contamination=0.05, random_state=42, n_jobs=-1)
        model.fit(sample[[column]])
        df['anomaly'] = model.predict(df[[column]])
        anomalies = df[df['anomaly'] == -1]
        return anomalies
    except:
        return None

# –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑
@st.cache_data(show_spinner="–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã... ‚è≥", ttl=300)
def time_series_analysis(df, date_col, value_col):
    try:
        df = df.set_index(date_col).sort_index()
        if len(df) > 1000:
            df = df.resample('D').mean()  # –†–µ—Å–µ–º–ø–ª–∏–Ω–≥ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        
        decomposition = seasonal_decompose(df[value_col], period=min(12, len(df)//2))
        
        fig = make_subplots(rows=4, cols=1, shared_xaxes=True)
        
        fig.add_trace(go.Scatter(x=df.index, y=df[value_col], name='–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'), row=1, col=1)
        fig.add_trace(go.Scatter(x=decomposition.trend.index, y=decomposition.trend, name='–¢—Ä–µ–Ω–¥'), row=2, col=1)
        fig.add_trace(go.Scatter(x=decomposition.seasonal.index, y=decomposition.seasonal, name='–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å'), row=3, col=1)
        fig.add_trace(go.Scatter(x=decomposition.resid.index, y=decomposition.resid, name='–û—Å—Ç–∞—Ç–∫–∏'), row=4, col=1)
        
        fig.update_layout(height=800, title_text="–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")
        return fig
    except:
        return None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ —Å GPT
@st.cache_data(show_spinner="–ì–µ–Ω–µ—Ä–∏—Ä—É—é AI –∏–Ω—Å–∞–π—Ç—ã... ü§ñ", ttl=600)
def generate_ai_insights(df):
    try:
        # –ï—Å–ª–∏ –∫–ª—é—á API –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        if not openai.api_key:
            return "üîë –ö–ª—é—á OpenAI API –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Secrets –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
            
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        data_summary = f"–î–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç {len(df)} —Å—Ç—Ä–æ–∫ –∏ {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫:\n"
        
        for col in df.columns:
            dtype = str(df[col].dtype)
            unique = len(df[col].unique())
            nulls = df[col].isnull().sum()
            data_summary += f"- {col}: {dtype}, {unique} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö, {nulls} –ø—Ä–æ–ø—É—Å–∫–æ–≤\n"
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = f"""
        –¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–∞—Ç–∞—Å–µ—Ç:
        {data_summary}
        
        –°–¥–µ–ª–∞–π 3-5 –∫–ª—é—á–µ–≤—ã—Ö –≤—ã–≤–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º. 
        –ï—Å–ª–∏ –µ—Å—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏, —É–∫–∞–∂–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏. 
        –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã, –ø—Ä–µ–¥–ª–æ–∂–∏ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞.
        –§–æ—Ä–º–∞—Ç: –∫—Ä–∞—Ç–∫–∏–µ –ø—É–Ω–∫—Ç—ã —Å emoji.
        """
        
        # –í—ã–∑–æ–≤ OpenAI API
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π data scientist, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=500,
            temperature=0.3
        )
        
        return response.choices[0].message.content
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤: {str(e)}"

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
def create_visualization(df, viz_type, x=None, y=None, z=None, color=None, size=None):
    try:
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        progress = st.progress(0)
        progress.progress(20)
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        viz_df = df.sample(min(10000, len(df))) if len(df) > 10000 else df
        
        fig = None
        if viz_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
            fig = px.histogram(viz_df, x=x, color=color, marginal="box", nbins=50)
        
        elif viz_type == "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞":
            corr = viz_df.select_dtypes(include=np.number).corr()
            fig = px.imshow(corr, text_auto=True, color_continuous_scale='RdBu')
        
        elif viz_type == "3D Scatter":
            fig = px.scatter_3d(viz_df, x=x, y=y, z=z, color=color, size=size)
        
        elif viz_type == "–ê–Ω–æ–º–∞–ª–∏–∏":
            anomalies = detect_anomalies(df, x)
            fig = px.scatter(viz_df, x=x, y=y, color=df.index.isin(anomalies.index))
        
        elif viz_type == "–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥":
            if len(viz_df) > 1000:
                viz_df = viz_df.set_index(x).resample('D').mean().reset_index()
            fig = px.line(viz_df, x=x, y=y, color=color)
            if len(viz_df) > 30:
                viz_df['rolling'] = viz_df[y].rolling(7).mean()
                fig.add_scatter(x=viz_df[x], y=viz_df['rolling'], name='–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ (7)')
        
        elif viz_type == "Candlestick":
            fig = go.Figure(data=[go.Candlestick(
                x=viz_df[x],
                open=viz_df[y],
                high=viz_df[y]+viz_df[y].std(),
                low=viz_df[y]-viz_df[y].std(),
                close=viz_df[y])])
        
        else:
            fig = px.scatter(viz_df, x=x, y=y, color=color, size=size)
        
        progress.progress(80)
        
        if fig:
            fig.update_layout(
                template="plotly_dark" if theme == "–¢–µ–º–Ω–∞—è" else "plotly_white",
                hovermode="x unified",
                height=600
            )
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            fig.update_traces(marker=dict(size=5, opacity=0.7))
        
        progress.progress(100)
        time.sleep(0.2)
        progress.empty()
        return fig
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return None

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
with st.sidebar:
    st.header("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", type=["csv", "xlsx", "json"], label_visibility="collapsed")
    
    if uploaded_file:
        st.info(f"–§–∞–π–ª: {uploaded_file.name}")
        st.caption("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: CSV, Excel, JSON")

if uploaded_file:
    df = load_data(uploaded_file)
    if df is not None:
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
        df = reduce_mem_usage(df)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
        tab1, tab2, tab3 = st.tabs(["üîç –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö", "üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "ü§ñ AI –ê–Ω–∞–ª–∏–∑"])
        
        with tab1:
            st.subheader("–ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö")
            st.dataframe(df.head(), use_container_width=True)
            
            with st.expander("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", expanded=True):
                c1, c2 = st.columns(2)
                with c1:
                    st.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫", len(df))
                    st.metric("–í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫", len(df.columns))
                    
                    # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    missing = df.isnull().sum().sum()
                    st.metric("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", f"{missing} ({missing/df.size:.1%})")
                
                with c2:
                    st.metric("–û–±—ä–µ–º –ø–∞–º—è—Ç–∏", f"{df.memory_usage().sum() / 1024**2:.2f} MB")
                    
                    # –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                    dtypes = df.dtypes.value_counts()
                    for dtype, count in dtypes.items():
                        st.caption(f"{dtype}: {count} –∫–æ–ª–æ–Ω–æ–∫")
            
            with st.expander("üìà –ë—ã—Å—Ç—Ä–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", expanded=True):
                col1, col2 = st.columns(2)
                with col1:
                    x_quick = st.selectbox("–û—Å—å X", df.columns, key="x_quick")
                with col2:
                    y_quick = st.selectbox("–û—Å—å Y", [None] + df.select_dtypes(include=np.number).columns.tolist(), key="y_quick")
                
                if st.button("–ë—ã—Å—Ç—Ä—ã–π –≥—Ä–∞—Ñ–∏–∫", use_container_width=True):
                    if y_quick:
                        fig = px.scatter(df, x=x_quick, y=y_quick, hover_data=df.columns)
                        st.plotly_chart(fig, use_container_width=True)
                    else:
                        fig = px.histogram(df, x=x_quick)
                        st.plotly_chart(fig, use_container_width=True)
        
        with tab2:
            st.subheader("–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
            
            cols = st.columns([1, 3])
            with cols[0]:
                viz_type = st.selectbox("–¢–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", [
                    "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞", "3D Scatter", 
                    "–ê–Ω–æ–º–∞–ª–∏–∏", "–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥", "Candlestick"
                ], key="viz_type")
                
                st.divider()
                
                x_axis = st.selectbox("–û—Å—å X", df.columns, index=0, key="x_axis")
                
                if viz_type not in ["–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞"]:
                    y_options = [col for col in df.columns if col != x_axis]
                    y_axis = st.selectbox("–û—Å—å Y", y_options, index=min(1, len(y_options)-1), key="y_axis")
                
                if viz_type == "3D Scatter":
                    z_options = [col for col in df.select_dtypes(include=np.number).columns if col not in [x_axis, y_axis]]
                    z_axis = st.selectbox("–û—Å—å Z", z_options, key="z_axis")
                else:
                    z_axis = None
                
                color = st.selectbox("–¶–≤–µ—Ç", [None] + [col for col in df.columns if col not in [x_axis, y_axis]], key="color")
                
                if viz_type in ["Bubble", "3D Scatter"]:
                    size = st.selectbox("–†–∞–∑–º–µ—Ä", [None] + df.select_dtypes(include=np.number).columns.tolist(), key="size")
                else:
                    size = None
                
                if st.button("–°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é", type="primary", use_container_width=True):
                    st.session_state.viz_requested = True
            
            with cols[1]:
                if 'viz_requested' in st.session_state:
                    with st.spinner("–°–æ–∑–¥–∞—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é..."):
                        fig = create_visualization(
                            df, viz_type, 
                            x=x_axis, y=y_axis if viz_type != "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞" else None,
                            z=z_axis, color=color, size=size
                        )
                    
                    if fig:
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                        if viz_type == "–ê–Ω–æ–º–∞–ª–∏–∏":
                            anomalies = detect_anomalies(df, x_axis)
                            if len(anomalies) > 0:
                                st.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(anomalies)} –∞–Ω–æ–º–∞–ª–∏–π")
                                with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏"):
                                    st.dataframe(anomalies)
        
        with tab3:
            st.subheader("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
            
            ai_col1, ai_col2 = st.columns([2, 1])
            
            with ai_col1:
                st.markdown(analyze_with_ai(df))
            
            with ai_col2:
                st.subheader("ü§ñ AI –ò–Ω—Å–∞–π—Ç—ã")
                st.markdown(generate_ai_insights(df))
            
            # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
            date_cols = [col for col in df.columns if is_datetime64_any_dtype(df[col])]
            if date_cols and len(df.select_dtypes(include=np.number).columns) > 0:
                st.divider()
                st.subheader("‚è≥ –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")
                
                ts_col1, ts_col2 = st.columns(2)
                with ts_col1:
                    selected_date = st.selectbox("–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞", date_cols)
                with ts_col2:
                    selected_value = st.selectbox("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", df.select_dtypes(include=np.number).columns)
                
                if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥", use_container_width=True):
                    with st.spinner("–í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞..."):
                        ts_fig = time_series_analysis(df, selected_date, selected_value)
                    
                    if ts_fig:
                        st.plotly_chart(ts_fig, use_container_width=True)

else:
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    st.markdown("""
        <div style="text-align:center; padding:50px 20px;">
            <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Data Analyzer Pro!</h2>
            <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑</p>
            <div style="margin:40px;">
                <svg xmlns="http://www.w3.org/2000/svg" width="120" height="120" viewBox="0 0 24 24" fill="none" stroke="#4e79a7" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                    <polyline points="7 10 12 15 17 10"></polyline>
                    <line x1="12" y1="15" x2="12" y2="3"></line>
                </svg>
            </div>
            <div style="display:flex; justify-content:center; gap:20px; margin-top:30px;">
                <div style="border:1px solid #ddd; padding:20px; border-radius:10px; width:200px;">
                    <h3>üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è</h3>
                    <p>–ë–æ–ª–µ–µ 15 —Ç–∏–ø–æ–≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤</p>
                </div>
                <div style="border:1px solid #ddd; padding:20px; border-radius:10px; width:200px;">
                    <h3>ü§ñ AI –ê–Ω–∞–ª–∏–∑</h3>
                    <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –∞–Ω–æ–º–∞–ª–∏–π</p>
                </div>
                <div style="border:1px solid #ddd; padding:20px; border-radius:10px; width:200px;">
                    <h3>‚è±Ô∏è –ë—ã—Å—Ç—Ä—ã–π</h3>
                    <p>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö</p>
                </div>
            </div>
        </div>
    """, unsafe_allow_html=True)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("""
    <div style="text-align:center; padding:20px; color:#666;">
        <p>üèÜ AI Data Analyzer Pro | –Ø–∫–æ–≤–ª–µ–≤–∞ –≠–≤–µ–ª–∏–Ω–∞</p>
        <p>–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ</p>
    </div>
""", unsafe_allow_html=True)
