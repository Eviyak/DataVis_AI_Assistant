import streamlit as st
import pandas as pd
import plotly.express as px
import openai

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OpenAI API
client = openai.OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

st.title("AI –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª", type=["csv"])

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

    st.subheader("–û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –¥–∞–Ω–Ω—ã—Ö")
    st.write("–§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö:", df.shape)
    st.write("–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:")
    st.write(df.dtypes)
    st.write("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
    st.dataframe(df.head())

    col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", df.columns)

    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏")
    try:
        st.text(df[col].describe(include='all').to_string())
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    def simple_smart_plot(data, column):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if pd.api.types.is_numeric_dtype(data[column]):
            return px.histogram(data, x=column, title=f'–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {column}')
        elif pd.api.types.is_datetime64_any_dtype(data[column]):
            num_cols = data.select_dtypes(include='number').columns
            y_col = num_cols[0] if len(num_cols) > 0 else None
            if y_col:
                return px.line(data, x=column, y=y_col, title=f'–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥: {column} –∏ {y_col}')
        elif data[column].nunique() < 10:
            counts = data[column].value_counts()
            return px.bar(x=counts.index, y=counts.values, title=f'–ë–∞—Ä-—á–∞—Ä—Ç: {column}', labels={'x': column, 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'})
        return px.histogram(data, x=column, title=f'–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): {column}')

    use_ai = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPT-4 –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –∏–Ω—Å–∞–π—Ç–æ–≤", value=True)

    if use_ai:
        with st.spinner("AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ..."):
            try:
                description = df[col].describe(include='all').to_string()

                system_prompt = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ –æ–ø–∏—Å–∞–Ω–∏—é —Å—Ç–æ–ª–±—Ü–∞ –ø—Ä–µ–¥–ª–æ–∂–∏ –ª—É—á—à–∏–π —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –∏ —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑."
                user_prompt = f"""–í–æ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ '{col}':
{description}

1. –ö–∞–∫–æ–π —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞? –û—Ç–≤–µ—Ç—å –û–î–ù–ò–ú —Å–ª–æ–≤–æ–º (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ): histogram, bar, line, box –∏–ª–∏ pie.
2. –ó–∞—Ç–µ–º, –∫—Ä–∞—Ç–∫–æ –Ω–∞–ø–∏—à–∏ –∏–Ω—Å–∞–π—Ç –æ –¥–∞–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–º —Å—Ç–æ–ª–±—Ü–µ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ).
"""

                response = client.chat.completions.create(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ]
                )

                answer = response.choices[0].message.content.strip()
                lines = answer.splitlines()
                suggestion = lines[0].strip().lower()
                insight = "\n".join(lines[1:]).strip()

                st.info(f"üí° **GPT –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:** `{suggestion}`")
                if insight:
                    st.success(f"üìä **AI-–∏–Ω—Å–∞–π—Ç:**\n\n{insight}")

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
                suggestion = "histogram"

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ —Å–æ–≤–µ—Ç—É GPT
        if suggestion == "histogram":
            fig = px.histogram(df, x=col, title=f'–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {col}')
        elif suggestion == "bar":
            counts = df[col].value_counts()
            fig = px.bar(x=counts.index, y=counts.values, title=f'–ë–∞—Ä-—á–∞—Ä—Ç: {col}', labels={'x': col, 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'})
        elif suggestion == "line":
            num_cols = df.select_dtypes(include='number').columns
            if len(num_cols) > 0:
                fig = px.line(df, x=col, y=num_cols[0], title=f'–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: {col}')
            else:
                fig = simple_smart_plot(df, col)
        elif suggestion == "box":
            fig = px.box(df, y=col, title=f'Boxplot: {col}')
        elif suggestion == "pie":
            counts = df[col].value_counts()
            fig = px.pie(names=counts.index, values=counts.values, title=f'–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: {col}')
        else:
            fig = simple_smart_plot(df, col)

    else:
        fig = simple_smart_plot(df, col)

    st.plotly_chart(fig, use_container_width=True)
