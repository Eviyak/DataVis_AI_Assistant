import streamlit as st
import pandas as pd
import plotly.express as px
import io
import json
import datetime
from ydata_profiling import ProfileReport
from streamlit_pandas_profiling import st_profile_report

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="EDA –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìä EDA –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö.")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
uploaded_file = st.file_uploader("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV, Excel –∏–ª–∏ JSON —Ñ–∞–π–ª", type=["csv", "xlsx", "xls", "json"])

# –ö—ç—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(show_spinner="–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ... ‚è≥", ttl=3600, max_entries=3)
def load_data(uploaded_file):
    try:
        file_bytes = uploaded_file.read()
        if uploaded_file.name.endswith('.csv'):
            return pd.read_csv(io.BytesIO(file_bytes), encoding_errors='ignore')
        elif uploaded_file.name.endswith(('.xlsx', '.xls')):
            return pd.read_excel(io.BytesIO(file_bytes))
        elif uploaded_file.name.endswith('.json'):
            data = json.loads(file_bytes.decode('utf-8'))
            return pd.json_normalize(data)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        return None

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
if uploaded_file is not None:
    df = load_data(uploaded_file)
    if df is not None:
        st.subheader("üìÑ –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(df.head(100))

        with st.expander("üßπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö"):
            st.write("**–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å:**", df.shape)
            st.write("**–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:**")
            st.write(df.dtypes)
            st.write("**–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**")
            st.write(df.isnull().sum())

        # –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if st.checkbox("üìà –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç Pandas Profiling"):
            profile = ProfileReport(df, title="Pandas Profiling Report", explorative=True)
            st_profile_report(profile)

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        st.subheader("üìä –ë—ã—Å—Ç—Ä–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        numeric_columns = df.select_dtypes(include='number').columns.tolist()
        categorical_columns = df.select_dtypes(include='object').columns.tolist()

        plot_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "Boxplot", "–¢–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "Bar chart"])

        if plot_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
            col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É", numeric_columns)
            fig = px.histogram(df, x=col)
            st.plotly_chart(fig, use_container_width=True)

        elif plot_type == "Boxplot":
            col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É", numeric_columns)
            fig = px.box(df, y=col)
            st.plotly_chart(fig, use_container_width=True)

        elif plot_type == "–¢–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫":
            x_col = st.selectbox("X –æ—Å—å", numeric_columns)
            y_col = st.selectbox("Y –æ—Å—å", numeric_columns, index=1 if len(numeric_columns) > 1 else 0)
            fig = px.scatter(df, x=x_col, y=y_col, color=df[categorical_columns[0]] if categorical_columns else None)
            st.plotly_chart(fig, use_container_width=True)

        elif plot_type == "Bar chart":
            cat_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É", categorical_columns)
            fig = px.bar(df[cat_col].value_counts().reset_index(), x='index', y=cat_col)
            st.plotly_chart(fig, use_container_width=True)
