import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import openai
import io
import json
from plotly.subplots import make_subplots
from sklearn.ensemble import IsolationForest
from statsmodels.tsa.seasonal import seasonal_decompose
import warnings
from pandas.api.types import is_datetime64_any_dtype

warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ç–æ–ª—å–∫–æ —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞)
st.set_page_config(
    page_title="ü§ñ AI Data Analyzer Pro",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
st.title("ü§ñ AI Data Analyzer Pro")
st.markdown("""
    <div style="background-color:#f0f2f6;padding:10px;border-radius:10px;margin-bottom:20px;">
    <p style="color:#333;font-size:18px;">üöÄ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å AI-powered –∏–Ω—Å–∞–π—Ç–∞–º–∏</b></p>
    <p style="color:#666;">–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV, Excel –∏–ª–∏ JSON ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é</p>
    </div>
""", unsafe_allow_html=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–∞ OpenAI –∏–∑ Streamlit Secrets
if 'OPENAI_API_KEY' in st.secrets:
    openai.api_key = st.secrets['OPENAI_API_KEY']
else:
    openai.api_key = ""

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–π —Ç–∞–∫–æ–π –∂–µ, —Ç–æ–ª—å–∫–æ —É–±—Ä–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∏ —à–∞–±–ª–æ–Ω –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –≤—Å–µ–≥–¥–∞ —Å–≤–µ—Ç–ª—ã–π

@st.cache_data(show_spinner="–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ... ‚è≥", ttl=3600, max_entries=3)
def load_data(uploaded_file):
    try:
        file_bytes = uploaded_file.read()
        if uploaded_file.name.endswith('.csv'):
            return pd.read_csv(io.BytesIO(file_bytes), encoding_errors='ignore')
        elif uploaded_file.name.endswith(('.xlsx', '.xls')):
            return pd.read_excel(io.BytesIO(file_bytes))
        elif uploaded_file.name.endswith('.json'):
            data = json.loads(file_bytes.decode('utf-8'))
            return pd.json_normalize(data)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        return None

def reduce_mem_usage(df):
    start_mem = df.memory_usage().sum() / 1024**2
    for col in df.columns:
        col_type = df[col].dtype
        if col_type != object:
            c_min = df[col].min()
            c_max = df[col].max()
            if str(col_type)[:3] == 'int':
                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:
                    df[col] = df[col].astype(np.int8)
                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:
                    df[col] = df[col].astype(np.int16)
                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:
                    df[col] = df[col].astype(np.int32)
                else:
                    df[col] = df[col].astype(np.int64)
            else:
                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:
                    df[col] = df[col].astype(np.float16)
                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:
                    df[col] = df[col].astype(np.float32)
                else:
                    df[col] = df[col].astype(np.float64)
    end_mem = df.memory_usage().sum() / 1024**2
    st.sidebar.info(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏: {start_mem:.2f} MB ‚Üí {end_mem:.2f} MB (—Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ {100*(start_mem-end_mem)/start_mem:.1f}%)")
    return df

@st.cache_data(show_spinner="–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ... üîç", ttl=600)
def analyze_with_ai(df):
    try:
        analysis = f"### üìä –û–±—â–∏–π –æ–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö\n"
        analysis += f"- **–°—Ç—Ä–æ–∫–∏:** {df.shape[0]}\n"
        analysis += f"- **–ö–æ–ª–æ–Ω–∫–∏:** {df.shape[1]}\n"
        analysis += f"- **–û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö:** {df.memory_usage().sum() / 1024**2:.2f} MB\n\n"

        num_cols = df.select_dtypes(include=np.number).columns
        if len(num_cols) > 0:
            analysis += "### üî¢ –ß–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
            stats = df[num_cols].describe().transpose()
            stats['skew'] = df[num_cols].skew()
            analysis += stats[['mean', 'std', 'min', '50%', 'max', 'skew']].to_markdown()

        cat_cols = df.select_dtypes(exclude=np.number).columns
        if len(cat_cols) > 0:
            analysis += "\n\n### üî§ –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
            for col in cat_cols:
                analysis += f"- **{col}**: {df[col].nunique()} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π\n"

        missing = df.isnull().sum()
        if missing.sum() > 0:
            analysis += "\n\n### ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\n"
            missing_percent = missing[missing > 0] / len(df) * 100
            missing_df = pd.DataFrame({'–ö–æ–ª–æ–Ω–∫–∞': missing_percent.index,
                                      '–ü—Ä–æ–ø—É—Å–∫–∏': missing[missing > 0],
                                      '%': missing_percent.values.round(1)})
            analysis += missing_df.to_markdown(index=False)

        if len(num_cols) > 1:
            corr = df[num_cols].corr().abs().unstack().sort_values(ascending=False)
            strong_corr = corr[(corr > 0.7) & (corr < 1)].drop_duplicates()
            if len(strong_corr) > 0:
                analysis += "\n\n### üîó –°–∏–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏\n"
                for pair, value in strong_corr.items():
                    analysis += f"- {pair[0]} –∏ {pair[1]}: {value:.2f}\n"

        return analysis
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

@st.cache_data(show_spinner="–ò—â—É –∞–Ω–æ–º–∞–ª–∏–∏... üïµÔ∏è", ttl=300)
def detect_anomalies(df, column):
    try:
        if len(df) > 10000:
            sample = df.sample(min(5000, len(df)))
        else:
            sample = df

        model = IsolationForest(contamination=0.05, random_state=42, n_jobs=-1)
        model.fit(sample[[column]])
        df['anomaly'] = model.predict(df[[column]])
        anomalies = df[df['anomaly'] == -1]
        return anomalies
    except:
        return None

@st.cache_data(show_spinner="–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã... ‚è≥", ttl=300)
def time_series_analysis(df, date_col, value_col):
    try:
        df = df.set_index(date_col).sort_index()
        if len(df) > 1000:
            df = df.resample('D').mean()

        decomposition = seasonal_decompose(df[value_col], period=min(12, len(df)//2))

        fig = make_subplots(rows=4, cols=1, shared_xaxes=True)
        fig.add_trace(go.Scatter(x=df.index, y=df[value_col], name='–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'), row=1, col=1)
        fig.add_trace(go.Scatter(x=decomposition.trend.index, y=decomposition.trend, name='–¢—Ä–µ–Ω–¥'), row=2, col=1)
        fig.add_trace(go.Scatter(x=decomposition.seasonal.index, y=decomposition.seasonal, name='–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å'), row=3, col=1)
        fig.add_trace(go.Scatter(x=decomposition.resid.index, y=decomposition.resid, name='–û—Å—Ç–∞—Ç–∫–∏'), row=4, col=1)

        fig.update_layout(height=800, title_text="–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")
        return fig
    except:
        return None

@st.cache_data(show_spinner="–ì–µ–Ω–µ—Ä–∏—Ä—É—é AI –∏–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏... ü§ñ", ttl=600)
def generate_ai_insights_and_viz(df):
    if not openai.api_key:
        return "üîë –ö–ª—é—á OpenAI API –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Secrets.", None, None, None, None, None, None

    try:
        prompt = (
            f"–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–Ω–Ω—ã–º.\n"
            f"–î–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç {df.shape[0]} —Å—Ç—Ä–æ–∫ –∏ {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫.\n"
            f"–ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}.\n"
            f"–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:\n{df.head().to_dict()}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π –∏–Ω—Å–∞–π—Ç—ã, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–¥–∏–Ω –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: "
            f"–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞, –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞, 3D Scatter, –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥, Candlestick, –ê–Ω–æ–º–∞–ª–∏–∏, –¢–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞.\n"
            f"–¢–∞–∫–∂–µ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Å–µ–π –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (x, y, z, color, size), –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–º–µ–Ω–∏–º–æ.\n"
            f"–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª—è–º–∏: insights (—Ç–µ–∫—Å—Ç), viz_type, x_axis, y_axis, z_axis, color, size."
        )

        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=600
        )
        text = response['choices'][0]['message']['content']

        parsed = json.loads(text)

        insights = parsed.get('insights', '')
        viz_type = parsed.get('viz_type', None)
        x_axis = parsed.get('x_axis', None)
        y_axis = parsed.get('y_axis', None)
        z_axis = parsed.get('z_axis', None)
        color = parsed.get('color', None)
        size = parsed.get('size', None)

        return insights, viz_type, x_axis, y_axis, z_axis, color, size

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ OpenAI: {str(e)}", None, None, None, None, None, None

def create_visualization(df, viz_type, x=None, y=None, z=None, color=None, size=None):
    try:
        viz_df = df.sample(min(10000, len(df))) if len(df) > 10000 else df

        if viz_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
            fig = px.histogram(viz_df, x=x, color=color, marginal="box", nbins=50)

        elif viz_type == "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞":
            corr = viz_df.select_dtypes(include=np.number).corr()
            fig = px.imshow(corr, text_auto=True, color_continuous_scale='RdBu')

        elif viz_type == "3D Scatter":
            fig = px.scatter_3d(viz_df, x=x, y=y, z=z, color=color, size=size)

        elif viz_type == "–ê–Ω–æ–º–∞–ª–∏–∏":
            anomalies = detect_anomalies(df, x)
            fig = px.scatter(viz_df, x=x, y=y, color=viz_df.index.isin(anomalies.index) if anomalies is not None else None)

        elif viz_type == "–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥":
            if len(viz_df) > 1000 and is_datetime64_any_dtype(viz_df[x]):
                viz_df = viz_df.set_index(x).resample('D').mean().reset_index()
            fig = px.line(viz_df, x=x, y=y, color=color)
            if len(viz_df) > 30:
                viz_df['rolling'] = viz_df[y].rolling(7).mean()
                fig.add_trace(go.Scatter(x=viz_df[x], y=viz_df['rolling'], mode='lines', name='–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ (7)'))

        elif viz_type == "Candlestick":
            fig = go.Figure(data=[go.Candlestick(
                x=viz_df[x],
                open=viz_df[y],
                high=viz_df[y] + viz_df[y].std(),
                low=viz_df[y] - viz_df[y].std(),
                close=viz_df[y])])

        else:
            fig = px.scatter(viz_df, x=x, y=y, color=color, size=size)

        fig.update_layout(
            template="plotly_white",
            hovermode="x unified",
            height=600
        )
        fig.update_traces(marker=dict(size=5, opacity=0.7))

        return fig
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return None

uploaded_file = st.file_uploader("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV, Excel –∏–ª–∏ JSON —Ñ–∞–π–ª", type=['csv', 'xlsx', 'xls', 'json'])
if uploaded_file is not None:
    df = load_data(uploaded_file)
    if df is not None and not df.empty:
        df = reduce_mem_usage(df)

        st.sidebar.markdown("---")
        st.sidebar.subheader("AI –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
        if st.sidebar.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."):
                analysis_text = analyze_with_ai(df)
                st.markdown(analysis_text)

        st.sidebar.subheader("AI –∏–Ω—Å–∞–π—Ç—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        if st.sidebar.button("–ü–æ–ª—É—á–∏—Ç—å AI –∏–Ω—Å–∞–π—Ç—ã –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"):
            with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Å–∞–π—Ç—ã –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é..."):
                insights, viz_type, x_axis, y_axis, z_axis, color, size = generate_ai_insights_and_viz(df)
                st.markdown(insights)
                if viz_type is not None:
                    fig = create_visualization(df, viz_type, x_axis, y_axis, z_axis, color, size)
                    if fig is not None:
                        st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning("AI –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é.")

        st.sidebar.markdown("---")
        if st.sidebar.button("–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
            st.dataframe(df)

    else:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π.")
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")
